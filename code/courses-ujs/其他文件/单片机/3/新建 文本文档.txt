#include "c8051f020.h"                
#include <intrins.h>

sbit	HD7279_DAT=P1^7;
sbit	HD7279_CLK=P1^6;

#define NOSELECT7279  	P5 |= 0x80		//SPICS4(P57)=1
#define SELECT7279  	P5 &= ~(0x80)  	//SPICS4(P57)=0;
#define Set7279DAT  	HD7279_DAT=1
#define Clr7279DAT  	HD7279_DAT=0
#define Set7279CLK  	HD7279_CLK=1
#define Clr7279CLK  	HD7279_CLK=0

unsigned char Count1ms;

void Delay1us(unsigned char us)
{
	while (us)
	{
	  _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
	  --us;
	}
}

void SYSCLK_Init (void)
{
   int i;                              // delay counter
   OSCXCN = 0x67;                      // start external oscillator with
                                       // 18.432MHz crystal
   for (i=0; i < 256; i++) ;           // Wait for osc. to start up
   while (!(OSCXCN & 0x80)) ;          // Wait for crystal osc. to settle
   OSCICN = 0x88;                      // select external oscillator as SYSCLK
                                       // source and enable missing clock
                                       // detector
}

#define PRT0CF P0MDOUT
#define PRT1CF P1MDOUT
#define PRT2CF P2MDOUT

void PORT_Init (void)
{
   XBR2    = 0x40;                     // Enable crossbar and weak pull-ups
}

void Timer0_Init (void)
{
   	CKCON|=0x8;
   	TMOD|=0x1;    	//16Bit
	Count1ms=10;
   	TR0 = 0;                         	// STOP Timer0
   	TH0 = (-SYSCLK/1000) >> 8;    		// set Timer0 to overflow in 1ms
   	TL0 = -SYSCLK/1000;
   	TR0 = 1;   	// START Timer0
   	IE|= 0x2; 
}

void Timer0_ISR (void) interrupt 1  //1ms
{
	TH0 = (-SYSCLK/1000) >> 8;  
   	TL0 = -SYSCLK/1000;
	if (Count1ms) Count1ms--;
}

void Delay1ms(unsigned char T)
{
	Count1ms=T;
	while (Count1ms);
}

void Delay1s(unsigned char T)
{
	while (T)
	{
		Delay1ms(200);
		Delay1ms(200);
		Delay1ms(200);
		Delay1ms(200);
		Delay1ms(200);
		T--;
	}
}
void Send7279Byte(unsigned char ch)
{	
	char i;
	SELECT7279;     	//置CS低电平 
	Delay1us(50);		//延时50μ
	
	for (i=0;i<8;i++)
	{	
		if (ch&0x80)	//输出7位到HD7279A的DATA端 
		{
			Set7279DAT;
		}
		else
		{
			Clr7279DAT;
		}
		Set7279CLK;		//置CLK高电平 
		ch=ch<<1;		//待发数据左移 
		Delay1us(8);	//延时8μ
		Clr7279CLK;		//置CLK低电平 
		Delay1us(8);	//延时50μ
	}
	Clr7279DAT;			//发送完毕，DATA端置低，返回 
}
unsigned char Receive7279Byte(void)
{
	unsigned char i,ch;
	ch=0;		
	Set7279DAT;			//DATA端置为高电平，输入状态
	Delay1us(50);		//延时50μ
	for (i=0;i<8;i++)
	{
		Set7279CLK;		//置CLK高电平
		Delay1us(8);	//延时8μ
		ch=ch<<1;		//接收数据左移1位
		if (HD7279_DAT)
			ch+=1;		//接收1位数据
		Clr7279CLK;		//置CLK低电平
		Delay1us(8);	//延时8μ
	}
	Clr7279DAT;			//接收完毕，DATA端重新置成低电平(输出状态)
	return ch;
}

void MoveLeft(void)
{
	Send7279Byte(0xA1);	//发左移指令 
	NOSELECT7279;     	//置CS高电平 
}

void MoveRight(void)
{
	Send7279Byte(0xA0);	//发左移指令 
	NOSELECT7279;     	//置CS高电平 
}

void Disp_(void)
{
		//显示-
    Send7279Byte(0x01);
    Send7279Byte(0x88);//数码管1闪烁
    Send7279Byte(0xfe);
	NOSELECT7279;     	//置CS高电平
}

unsigned char code BdSeg[]={
					0x7e,0x30,0x6d,0x79, // 0 1 2 3 
                   	0x33,0x5b,0x5f,0x70, // 4 5 6 7
                   	0x7f,0x7b,0x77,0x1f, // 8 9 a b
                   	0x4e,0x3d,0x4f,0x47, // c d e f
                   	0x00,0x01}; 

char GetKeyValue(void)
{
	char KeyValue;
	if (P17==1/*CPT1CN&0x40*/) return -1;	//无键按下 
	Send7279Byte(0x15);	//发读键盘指令 
	KeyValue=Receive7279Byte();
	NOSELECT7279;     	//置CS高电平 
	return KeyValue; 
}

void WaitKeyOff(void)
{
	while  (!(CPT1CN&0x40));
}

void Test7279( )
{
	char KeyValue;
	int s=0;
	Delay1ms(25);		//等待25ms复位时间 
	Send7279Byte(0xA4);	//发复位指令 
	NOSELECT7279;     	//置CS高电平 	
         while(1)
          {
		  	Disp_();
		  	KeyValue=GetKeyValue();
			if (KeyValue!=-1) 
			{
				s=0;
				Send7279Byte(0xA4);	//发复位指令 
				NOSELECT7279;     	//置CS高电平 
		    	Send7279Byte(0xC8);	//发送键码值，按方式1译码下载显示 
		   	 	Send7279Byte(KeyValue);
		    	NOSELECT7279;     	//置CS高电平 
		    	WaitKeyOff();
				Delay1ms(500);
			}
			else if(s<5)
			{
				MoveLeft();
				s++;
				Delay1ms(500);

			}
			else if(s<10)
			{
				MoveRight();
				s++;
				Delay1ms(500);
			}
			else
			{
				s=0;
			
			}
		
			
           }

}

void main (void) 
{
	WDTCN = 0xde;
	WDTCN = 0xad;           //关看门狗
	SYSCLK_Init ();         //初始化时钟
	Timer0_Init();			//初始化定时器
	PORT_Init ();           //初始化IO口
	CPT1CN|=0x80;			//使能比较器1
	EA=1;					//开中断
	Test7279();
}

